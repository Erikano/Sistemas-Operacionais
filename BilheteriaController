package controller;

import java.util.concurrent.Semaphore;

public class ThreadBilhete extends Thread {

	private int idBilhete;
	private static int processoLogin;
	private static int processoTentadenovo;
	private Semaphore semaforo;

	public ThreadBilhete(int idBilhete, Semaphore semaforo) {
		this.idBilhete = idBilhete;
		this.semaforo = semaforo;
	}

	// Até aqui, eu dei nome aos bois.

	// Começa o processo construtor

	public void run() {
		tentandoLogar();
		try {
			// --------P (Acquire)-------------
			semaforo.acquire();
			tentandoValidar();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			// --------V (Release)-------------
			semaforo.release();
			tentaDenovo();
		}
	}

	private void tentandoLogar() {
		int tempoUsado = 0;
		int tempoLimite = 1000;
		int tempo = 3000;
		int tempoComprando = 0;
		int tempoMaximo = 2000;

		while (tempoUsado < tempoLimite) {
			tempoUsado = (int) ((Math.random() * 50) + 1951);

			if (tempoUsado < tempoLimite) {
				System.out.println("Usuário " + processoLogin + " logou.");

				while (tempoComprando < tempoMaximo) {
					tempoComprando = (int) ((Math.random() * 1000) + 2000);

					if (tempoComprando < 2500) {
						System.out.println("Enviado para validação");
						processoLogin++;
					} else {
						System.out.println("Encerrado login, compra não efetuada");
						try {
							sleep(tempo);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			} else {
				System.out.println("Timeout.");
				try {
					sleep(tempo);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void tentandoValidar() {

		int compraBilhete = 0;
		int totalBilhete = 100;

		while (compraBilhete <= totalBilhete) {
			compraBilhete = (int) ((Math.random() * 1) + 4);

			if (totalBilhete > 0) {
				totalBilhete = totalBilhete - compraBilhete;
				System.out.println(" Usuário comprou: " + compraBilhete + " bilhete(s) código: " + idBilhete);

			} else {
				System.out.println("Bilhete esgotado.");
				break;
			}
		}
	}

	private void tentaDenovo() {
		processoTentadenovo++;

	}
}
