package controller;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import javax.swing.JOptionPane;

//criar construtor automaticamente ctrl + 3 
// ctrl + 3 abre uma tela, digita constru ele abrir opção para construir automaticamente o construtor

public class ArquivosController implements iArquivosController {

	// quando colocar o implements, por o cursor sobre o ArquivosController e
	// ele vai dar a opção de construir automaticamente uma classe com todas as
	// características da interface implementada.

	public ArquivosController() {
		super();
	}

	@Override
	public void readDir(String path) throws IOException {
		// no java File é arquivo ou diretório os dois são trabalhandos no tipo
		// File

		File dir = new File(path);

		// este if lá em baixo é uma validação de teste, SEMPRE VAI TER DE
		// FAZER, pra saber se o alguém não chumbou o path ou se ele não entrou
		// como um .exe

		// dir.exists retorna um boolean, true or false,
		// se ele existir no sist de arquivos, ele retorna
		// true. isDirect tb retorna boolean, se ele é o
		// caminho de um diretório ou arquivo.

		if (dir.exists() && dir.isDirectory()) {
			File[] files = dir.listFiles();
			for (File f : files) {
				if (f.isFile()) {
					System.out.println("     \t" + f.getName());

				} else {
					System.out.println("<DIR> \t" + f.getName());
				}
			}
		} else {
			throw new IOException("Diretório Inválido");
		}
	}

	@Override
	public void createFile(String path, String name) throws IOException {
		// se não existe, cria. Se existe escreve embaixo

		File dir = new File(path);
		File arq = new File(path, name + ".csv"); // um é o caminho o outro é o
													// argumento
		if (dir.exists() && dir.isDirectory()) {
			boolean existe = false;
			if (arq.exists()) {
				existe = true;
			}
			String conteudo = geraCsv();
			FileWriter fileWriter = new FileWriter(arq, existe);
			PrintWriter print = new PrintWriter(fileWriter);
			print.write(conteudo);
			print.flush();
			print.close();
			fileWriter.close();

		} else {
			throw new IOException("DIRETÓRIO INVÁLIDO");
		}

	}

	private String geraCsv() {

		StringBuffer buffer = new StringBuffer();
		String linha = "";
		while (!linha.equalsIgnoreCase("fim")) {
			linha = JOptionPane.showInputDialog(null, "Digite uma frase/número", "Entrada de texto/número",
					JOptionPane.INFORMATION_MESSAGE);
			if (!linha.equalsIgnoreCase("fim")) {
				buffer.append(linha + "\r\n");
			}
		}

		return buffer.toString();
	}

	@Override
	public void readFile(String path, String name) throws IOException {
		File arq = new File(path, name);
		if (arq.exists() && arq.isFile()) {
			FileInputStream fluxo = new FileInputStream(arq);
			InputStreamReader leitor = new InputStreamReader(fluxo);
			BufferedReader buffer = new BufferedReader(leitor);
			String linha = buffer.readLine();
			while (linha != null) { // procura EOF
				System.out.println(linha);
				linha = buffer.readLine();
			}

			buffer.close();
			leitor.close();
			fluxo.close();

		} else {
			throw new IOException("Arquivo Inválido");
		}

	}

	@Override
	public void openFile(String path, String name) throws IOException {
		File arq = new File(path, name);
		if (arq.exists() && arq.isFile()) {
			Desktop desktop = Desktop.getDesktop();
			desktop.open(arq);

		} else {
			throw new IOException("Arquivo Inválido");
		}

	}

}
